const { Client, GatewayIntentBits, Collection } = require('discord.js');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk').default;
const config = require('./config.json');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.DirectMessages
    ]
});

client.commands = new Collection();
const prefix = config.prefix || '!';

// Bi·∫øn l∆∞u tr·ªØ tin nh·∫Øn c·ªßa bot ƒë√£ ƒë∆∞·ª£c g·ª≠i theo t·ª´ng k√™nh v√† th·ªùi gian
let messageHistory = new Map(); // Map ch·ª©a k√™nh v√† tin nh·∫Øn theo th·ªùi gian

// Bi·∫øn l∆∞u tr·ªØ c√°c th√¥ng ƒëi·ªáp ƒë√£ ghi log
let loggedCommands = new Set();

const commandFolders = fs.readdirSync(path.join(__dirname, 'commands'));

for (const folder of commandFolders) {
    const folderPath = path.join(__dirname, 'commands', folder);
    if (!fs.lstatSync(folderPath).isDirectory()) continue;

    const commandFiles = fs.readdirSync(folderPath).filter(file => file.endsWith('.js'));

    for (const file of commandFiles) {
        try {
            const command = require(path.join(folderPath, file));
            if (command.name && typeof command.execute === 'function') {
                client.commands.set(command.name, command);
                console.log(chalk.blue(`‚úÖ ƒê√£ t·∫£i l·ªánh: ${command.name}`));
            } else {
                console.warn(chalk.yellow(`‚ö† L·ªánh ${file} trong ${folder} kh√¥ng h·ª£p l·ªá.`));
            }
        } catch (error) {
            console.error(chalk.red(`‚ùå L·ªói khi t·∫£i l·ªánh ${file}:`), error);
        }
    }
}

// üìú **H√†m ghi log v√†o logs.txt v√† hi·ªÉn th·ªã tr√™n CMD**
function logCommand(userId, commandName, username) {
    const time = new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });
    const logMessage = `[${time}] User: ${username} (${userId}) - L·ªánh: ${commandName}\n`;

    // Ki·ªÉm tra n·∫øu ƒë√£ ghi log cho l·ªánh n√†y
    if (!loggedCommands.has(logMessage)) {
        fs.appendFile('logs.txt', logMessage, (err) => {
            if (err) console.error(`‚ùå L·ªói khi ghi log:`, err);
        });

        loggedCommands.add(logMessage);  // Th√™m v√†o Set ƒë·ªÉ tr√°nh ghi l·∫°i l·∫ßn n·ªØa

        console.log(chalk.green(`[üìú LOG] ${time}`) + 
                    chalk.blue(` | User: ${username} (${userId})`) + 
                    chalk.yellow(` | L·ªánh: ${commandName}`));
    }
}

// üìú **Ghi log danh s√°ch m√°y ch·ªß bot tham gia**
function logGuilds() {
    const time = new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });
    const guildList = client.guilds.cache.map(guild => {
        const inviteLink = `https://discord.gg/${guild.id}`;
        return `${guild.name} (ID: ${guild.id}) - Link m·ªùi: ${inviteLink}`;
    }).join('\n');

    const logMessage = `[${time}] M√°y ch·ªß bot tham gia:\n${guildList}\n`;

    // Ki·ªÉm tra n·∫øu ƒë√£ ghi log danh s√°ch m√°y ch·ªß
    if (!loggedCommands.has(logMessage)) {
        fs.appendFile('logs.txt', logMessage, (err) => {
            if (err) console.error(`‚ùå L·ªói khi ghi log danh s√°ch m√°y ch·ªß:`, err);
        });

        loggedCommands.add(logMessage);  // Th√™m v√†o Set ƒë·ªÉ tr√°nh ghi l·∫°i l·∫ßn n·ªØa

        console.log(chalk.green(`[üìú LOG] ${time}`) + 
                    chalk.yellow(` | M√°y ch·ªß bot tham gia:\n${guildList}`));

        console.log(`Danh s√°ch c√°c server m√† bot tham gia: \n${guildList}`);
    }
}

// üìú **Ghi log tin nh·∫Øn ng∆∞·ªùi d√πng t·∫°i m√°y ch·ªß**
function logUserMessage(message) {
    const time = new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });
    const logMessage = `[${time}] M√°y ch·ªß: ${message.guild.name} (ID: ${message.guild.id}) - K√™nh: ${message.channel.name} (ID: ${message.channel.id}) - User: ${message.author.username} (${message.author.id}) - Tin nh·∫Øn: ${message.content}\n`;

    // Ghi log tin nh·∫Øn ng∆∞·ªùi d√πng v√†o file log
    fs.appendFile('userMessages.txt', logMessage, (err) => {
        if (err) console.error(`‚ùå L·ªói khi ghi log tin nh·∫Øn ng∆∞·ªùi d√πng:`, err);
    });

    console.log(chalk.green(`[üìú LOG] ${time}`) + 
                chalk.blue(` | M√°y ch·ªß: ${message.guild.name}`) + 
                chalk.yellow(` | K√™nh: ${message.channel.name}`) +
                chalk.blue(` | User: ${message.author.username} (${message.author.id})`) + 
                chalk.yellow(` | Tin nh·∫Øn: ${message.content}`));
}

// ‚úÖ **Bot s·∫µn s√†ng**
client.once('ready', () => {
    console.log(chalk.green(`‚úÖ Bot ƒë√£ ho·∫°t ƒë·ªông v·ªõi t√™n: ${client.user.tag}`));

    // Ghi log danh s√°ch c√°c m√°y ch·ªß bot tham gia
    logGuilds();
});

// üì® **L·∫Øng nghe tin nh·∫Øn**
client.on('messageCreate', async (message) => {
    // Ghi log tin nh·∫Øn ng∆∞·ªùi d√πng
    if (!message.author.bot) {
        logUserMessage(message);
    }

    if (message.author.bot) {
        const currentTime = Date.now(); // L·∫•y th·ªùi gian hi·ªán t·∫°i
        const channelId = message.channel.id; // L·∫•y ID k√™nh

        // Ki·ªÉm tra n·∫øu k√™nh ch∆∞a c√≥ trong messageHistory
        if (!messageHistory.has(channelId)) {
            messageHistory.set(channelId, []);
        }

        const channelMessages = messageHistory.get(channelId); // L·∫•y danh s√°ch tin nh·∫Øn c·ªßa k√™nh

        const lastMessage = channelMessages.find(msg => msg.content === message.content);

        if (lastMessage) {
            const timeDifference = currentTime - lastMessage.timestamp;

            // N·∫øu tin nh·∫Øn tr√πng l·∫∑p v√† c√°ch nhau d∆∞·ªõi 1 gi√¢y, x√≥a tin nh·∫Øn
            if (timeDifference < 1000) {
                try {
                    await message.delete(); // Th√™m try-catch ƒë·ªÉ x·ª≠ l√Ω l·ªói khi x√≥a
                    console.log(chalk.yellow(`‚ö† ƒê√£ x√≥a tin nh·∫Øn tr√πng l·∫∑p c·ªßa bot trong k√™nh ${message.channel.name}: ${message.content}`));
                } catch (error) {
                    console.error(chalk.red(`‚ùå L·ªói khi x√≥a tin nh·∫Øn tr√πng l·∫∑p: ${error.message}`));
                }
                return;
            }
        }

        // L∆∞u tin nh·∫Øn c·ªßa bot v√†o m·∫£ng v·ªõi th·ªùi gian g·ª≠i
        channelMessages.push({ content: message.content, timestamp: currentTime });
        // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tin nh·∫Øn l∆∞u tr·ªØ ƒë·ªÉ tr√°nh qu√° t·∫£i
        if (channelMessages.length > 100) {
            channelMessages.shift(); // X√≥a tin nh·∫Øn c≈© n·∫øu v∆∞·ª£t qu√° 100 tin nh·∫Øn
        }
    }

    if (!message.content.startsWith(prefix)) return;

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const commandName = args.shift().toLowerCase();
    const command = client.commands.get(commandName);

    if (!command) {
        return message.reply("‚ö† L·ªánh kh√¥ng h·ª£p l·ªá!");
    }

    try {
        logCommand(message.author.id, commandName, message.author.username);

        command.execute(message, args, client);

    } catch (error) {
        console.error(chalk.red(`‚ùå L·ªói khi ch·∫°y l·ªánh ${commandName}:`), error);
        message.reply("‚ö† ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh n√†y.");
    }
});

// üîë **ƒêƒÉng nh·∫≠p bot**
client.login(config.token);
