const fs = require('fs');
const path = require('path');
const bankPath = path.join(__dirname, '../../bank.json');

// H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ file JSON
const readBankData = () => {
    try {
        return JSON.parse(fs.readFileSync(bankPath, 'utf8'));
    } catch (err) {
        return { accounts: {} }; // Tr√°nh l·ªói n·∫øu file tr·ªëng
    }
};

// H√†m ghi d·ªØ li·ªáu v√†o file JSON
const writeBankData = (data) => {
    try {
        fs.writeFileSync(bankPath, JSON.stringify(data, null, 2), 'utf8');
    } catch (err) {
        throw new Error('L·ªói khi l∆∞u d·ªØ li·ªáu ng√¢n h√†ng!');
    }
};

module.exports = {
    name: 'pay',
    description: 'üí∞ Chuy·ªÉn ti·ªÅn ƒë·∫øn ng∆∞·ªùi kh√°c b·∫±ng @mention ho·∫∑c s·ªë t√†i kho·∫£n',
    async execute(message, args) {
        if (args.length < 2) {
            return message.reply("‚ö† S·ª≠ d·ª•ng: `!pay <@ng∆∞·ªùi nh·∫≠n | s·ªë t√†i kho·∫£n> <s·ªë ti·ªÅn>`");
        }

        let recipient = message.mentions.users.first() || args[0];
        let amount = parseInt(args[1]);

        if (isNaN(amount) || amount <= 0) {
            return message.reply("üö´ S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
        }

        let bankData = readBankData();
        if (!bankData.accounts) bankData.accounts = {};

        let senderId = message.author.id;

        // Ki·ªÉm tra t√†i kho·∫£n ng∆∞·ªùi g·ª≠i
        if (!bankData.accounts[senderId]) {
            return message.reply("‚ö† B·∫°n ch∆∞a c√≥ t√†i kho·∫£n ng√¢n h√†ng! D√πng `!dangkybank` ƒë·ªÉ ƒëƒÉng k√Ω.");
        }

        if (bankData.accounts[senderId].balance < amount) {
            return message.reply("üí∏ B·∫°n kh√¥ng c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ chuy·ªÉn!");
        }

        let receiverId;
        let receiverName;

        // N·∫øu ng∆∞·ªùi nh·∫≠n l√† @mention
        if (recipient.id) {
            receiverId = recipient.id;
            receiverName = recipient.username;
        } else {
            // N·∫øu nh·∫≠p s·ªë t√†i kho·∫£n, t√¨m user theo accountNumber
            receiverId = Object.keys(bankData.accounts).find(id => bankData.accounts[id].accountNumber == recipient);
            if (!receiverId) {
                return message.reply("‚ùå S·ªë t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
            }
            let member = await message.guild.members.fetch(receiverId).catch(() => null);
            receiverName = member ? member.user.username : `Ng∆∞·ªùi #${receiverId}`;
        }

        if (!bankData.accounts[receiverId]) {
            return message.reply("‚ùå Ng∆∞·ªùi nh·∫≠n ch∆∞a c√≥ t√†i kho·∫£n ng√¢n h√†ng!");
        }

        // Th·ª±c hi·ªán giao d·ªãch
        bankData.accounts[senderId].balance -= amount;
        bankData.accounts[receiverId].balance += amount;

        writeBankData(bankData);

        return message.reply(
            `‚úÖ B·∫°n ƒë√£ chuy·ªÉn **${amount.toLocaleString()}üíµ** cho **${receiverName}** th√†nh c√¥ng!`
        );
    }
};
